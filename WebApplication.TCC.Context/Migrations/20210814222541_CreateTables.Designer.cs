// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication.TCC.Context.Datas;

namespace WebApplication.TCC.Context.Migrations
{
    [DbContext(typeof(TccContext))]
    [Migration("20210814222541_CreateTables")]
    partial class CreateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WebApplication.TCC.Context.Models.Doctor", b =>
                {
                    b.Property<long>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("doctor_id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnName("document")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Id");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("VARCHAR(120)");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("DoctorId");

                    b.ToTable("doctor");

                    b.HasData(
                        new { DoctorId = 123L, AccessFailedCount = 0, ConcurrencyStamp = "5eec08cb-f1c2-4288-8b17-5f93a459de7f", Document = "12165466733", Email = "admin@example.org", EmailConfirmed = false, Id = "7dbb402a-f89f-473f-9a11-24f1c92ca447", LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAED0tb8N23CW0B1uLCmdSzL1kfJKD1NqSU6VxzkJ/ATsHW8awVv+bBSmNiACpNR9Iqw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("WebApplication.TCC.Context.Models.DoctorPatient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("doctor_patient_id");

                    b.Property<long>("PatientId")
                        .HasColumnName("patient_id");

                    b.Property<long>("doctor_id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.HasIndex("doctor_id");

                    b.ToTable("doctor_patient");
                });

            modelBuilder.Entity("WebApplication.TCC.Context.Models.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnName("document")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("Height")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnName("height")
                        .HasColumnType("NUMERIC(2,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<decimal>("Weight")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnName("weight")
                        .HasColumnType("NUMERIC(3,3)");

                    b.HasKey("Id");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("WebApplication.TCC.Context.Models.DoctorPatient", b =>
                {
                    b.HasOne("WebApplication.TCC.Context.Models.Patient", "Patient")
                        .WithOne("Doctor")
                        .HasForeignKey("WebApplication.TCC.Context.Models.DoctorPatient", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication.TCC.Context.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("doctor_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
